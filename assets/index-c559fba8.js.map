{"version":3,"file":"index-c559fba8.js","sources":["../../src/images/badge-github.svg","../../src/images/mocking-spongebob.jpg","../../src/lib/create-image.ts","../../src/lib/sanitize-text.ts","../../src/lib/decorate-text.ts","../../src/lib/set-font-style.ts","../../src/lib/calculate-font-size.ts","../../src/lib/draw-text-line.ts","../../src/lib/draw.ts","../../src/lib/url-parameters.ts","../../src/lib/update-view.ts","../../src/main.ts"],"sourcesContent":["export default \"__VITE_ASSET__7b959e5c__\"","export default \"__VITE_ASSET__baf4dcba__\"","export async function createImage(source: string): Promise<HTMLImageElement> {\n  const image = new Image();\n  image.src = source;\n  await new Promise<void>((resolve, reject) => {\n    image.addEventListener('load', () => resolve());\n    image.addEventListener('error', () => reject());\n  });\n  return image;\n}\n","export function sanitizeText(text: string): string[] {\n  return text\n    .trim()\n    .split('\\n')\n    .map(line => line.trim());\n}\n","enum CharacterCase {\n  Lower = 0,\n  Upper = 1\n}\n\nexport function decorateText(lines: string[]): string[] {\n  let characterCase = CharacterCase.Upper;\n  return lines.map(line =>\n    [...line]\n      .map(character => {\n        if (/^\\s$/.test(character)) {\n          return character;\n        } else if (characterCase === CharacterCase.Lower) {\n          characterCase = CharacterCase.Upper;\n          return character.toUpperCase();\n        } else {\n          characterCase = CharacterCase.Lower;\n          return character.toLowerCase();\n        }\n      })\n      .join('')\n  );\n}\n","export function setFontStyle(fontSize: number, canvas: HTMLCanvasElement): void {\n  const context = canvas.getContext('2d')!;\n  context.font = `bold ${fontSize}px Dejavu Sans, Arial, sans-serif`;\n  context.strokeStyle = 'black';\n  context.fillStyle = 'white';\n  context.lineWidth = fontSize * 0.075;\n}\n","import { setFontStyle } from './set-font-style';\n\nconst maxFontSize = 300;\nconst minFontSize = 50;\n\nexport function calculateFontSize(lines: string[], canvas: HTMLCanvasElement): number {\n  const context = canvas.getContext('2d')!;\n  const longestLine = lines.reduce((lastLine, line) => (line.length > lastLine.length ? line : lastLine), '');\n  let fontSize = maxFontSize;\n  setFontStyle(fontSize, canvas);\n  let drawnText = context.measureText(longestLine);\n  while (drawnText.width > canvas.width && fontSize > minFontSize) {\n    console.log(fontSize);\n    fontSize = fontSize - 10;\n    setFontStyle(fontSize, canvas);\n    drawnText = context.measureText(longestLine);\n  }\n  return fontSize;\n}\n","export function drawTextLine(line: string, lineIndex: number, fontSize: number, canvas: HTMLCanvasElement): void {\n  const context = canvas.getContext('2d')!;\n  const drawnText = context.measureText(line);\n  const positionX = canvas.width / 2 - drawnText.width / 2;\n  const positionY = fontSize * (lineIndex + 1);\n  context.strokeText(line, positionX, positionY);\n  context.fillText(line, positionX, positionY);\n}\n","import { calculateFontSize } from './calculate-font-size';\nimport { drawTextLine } from './draw-text-line';\nimport { setFontStyle } from './set-font-style';\n\nexport function draw(lines: string[], image: HTMLImageElement, canvas: HTMLCanvasElement): void {\n  const context = canvas.getContext('2d')!;\n  const fontSize = calculateFontSize(lines, canvas);\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  context.drawImage(image, 0, 0);\n  setFontStyle(fontSize, canvas);\n  lines.forEach((line, index) => drawTextLine(line, index, fontSize, canvas));\n}\n","export interface URLParameters {\n  text: string;\n}\n\nexport function setURLParameters(text: string | string[], textarea: HTMLTextAreaElement): void {\n  text = (Array.isArray(text) ? text.join('\\n') : text).trim();\n  const parameters: { [key: string]: string } = {};\n  if (text.length > 0 && text !== textarea.placeholder) {\n    parameters.text = text;\n  }\n  const url = new URL(window.location.href);\n  url.search = new URLSearchParams(parameters).toString();\n  window.history.replaceState({}, document.title, url.toString());\n}\n\nexport function getURLParameters(): Partial<URLParameters> {\n  const urlParameters = new URLSearchParams(window.location.search);\n  const text = (urlParameters.get('text') || '').trim();\n  return { text: text.length > 0 ? text : undefined };\n}\n","import { decorateText } from './decorate-text';\nimport { draw } from './draw';\nimport { sanitizeText } from './sanitize-text';\nimport { setURLParameters } from './url-parameters';\n\nexport function updateView(\n  text: string,\n  image: HTMLImageElement,\n  canvas: HTMLCanvasElement,\n  textarea: HTMLTextAreaElement\n): void {\n  const lines = sanitizeText(text);\n  draw(decorateText(lines), image, canvas);\n  setURLParameters(lines, textarea);\n}\n","import './style.scss';\n\nimport githubBadgeSource from './images/badge-github.svg';\nimport spongebobImageSource from './images/mocking-spongebob.jpg';\nimport { createImage } from './lib/create-image';\nimport { sanitizeText } from './lib/sanitize-text';\nimport { updateView } from './lib/update-view';\nimport { getURLParameters } from './lib/url-parameters';\n\ndocument.querySelector<HTMLDivElement>('#app')!.innerHTML = `\n  <canvas id=\"canvas\" title=\"right click to copy or save\"></canvas>\n  <textarea name=\"textarea\" id=\"textarea\" placeholder=\"write somethingâ€¦\" tabindex=\"0\" cols=\"30\" rows=\"10\"></textarea>\n  <footer>\n    <a href=\"https://github.com/simbo/mocking-spongebob\">\n      <img src=\"${githubBadgeSource}\" alt=\"simbo/mocking-spongebob\" />\n    </a>\n  </footer>\n`;\n\nconst image = await createImage(spongebobImageSource);\nconst canvas = document.querySelector<HTMLCanvasElement>('#canvas')!;\nconst textarea = document.querySelector<HTMLTextAreaElement>('#textarea')!;\n\ncanvas.width = image.width;\ncanvas.height = image.height;\n\ntextarea.addEventListener('keyup', () => updateView(textarea.value, image, canvas, textarea));\n\nconst urlParameters = getURLParameters();\n\nif (urlParameters.text) {\n  textarea.value = sanitizeText(urlParameters.text).join('\\n');\n}\n\nupdateView(textarea.value.length > 0 ? textarea.value : textarea.placeholder, image, canvas, textarea);\n"],"names":["githubBadgeSource","spongebobImageSource","createImage","source","image","resolve","reject","sanitizeText","text","line","decorateText","lines","characterCase","character","setFontStyle","fontSize","canvas","context","maxFontSize","minFontSize","calculateFontSize","longestLine","lastLine","drawnText","drawTextLine","lineIndex","positionX","positionY","draw","index","setURLParameters","textarea","parameters","url","getURLParameters","updateView","urlParameters"],"mappings":"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"}